---
AWSTemplateFormatVersion: '2010-09-09'
Description: SharkSync Stack

Parameters: 
  LambdaZip: 
    Type: String

Resources:

  S3BucketWeb:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: io.sharksync.web

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3BucketWeb
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3BucketWeb
              - "/*"
          Principal:
            AWS:
              - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E2L91VF2FR5I1N'

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: 'lambda-edge-role'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CloudFrontWebApp:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: io.sharksync.web.s3.amazonaws.com
          Id: s3
          S3OriginConfig:
            OriginAccessIdentity: origin-access-identity/cloudfront/E2L91VF2FR5I1N
        Enabled: 'true'
        Comment: io.sharksync.web
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: s3
          MinTTL: 3153600000
          DefaultTTL: 3153600000
          MaxTTL: 3153600000
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          SmoothStreaming: 'false'
          Compress: 'true'
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: arn:aws:lambda:us-east-1:429810410321:function:sharksync-web-origin-request:3
        PriceClass: PriceClass_All
        HttpVersion: http2

  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Account
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ApplicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Application
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Device
      AttributeDefinitions:
      - AttributeName: ApplicationId
        AttributeType: S
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: ApplicationId
        KeyType: HASH
      - AttributeName: Id
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  WebApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: 'web-api-lambda-role'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WebApiLambdaRoleInlinePolicy:
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "web-api-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Resource: ["*"]
            Action: ["secretsmanager:*", "dynamodb:*"]
      Roles: 
        - Ref: "WebApiLambdaRole"

  WebApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SharkSync.Web.Api::SharkSync.Web.Api.LambdaEntryPoint::FunctionHandlerAsync
      Code:
        S3Bucket: io.sharksync.builds
        S3Key: 
		  Ref: LambdaZip
      Role:
        Fn::GetAtt:
          - WebApiLambdaRole
          - Arn
      Runtime: dotnetcore2.0
      MemorySize: 256
      Timeout: 300

  WebApiGatewayApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: SharkSync.WebApi

  WebApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt WebApiGatewayApi.RootResourceId
      RestApiId: !Ref WebApiGatewayApi
      PathPart: '{proxy+}'

  WebApiGatewayProxyMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref WebApiGatewayResource
      RestApiId: !Ref WebApiGatewayApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        Uri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
        - Arn:
            Fn::GetAtt:
            - WebApiLambda
            - Arn
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200

  WebApiGatewayDeployment:
    DependsOn:
      - WebApiGatewayProxyMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref WebApiGatewayApi
      StageName: Prod

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - WebApiLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: WebApiGatewayApi
          - "/*/*/*"
