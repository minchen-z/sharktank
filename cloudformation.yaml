---
AWSTemplateFormatVersion: '2010-09-09'
Description: SharkSync Stack

Parameters: 
  Route53HostedZoneId: 
    Type: String
  DomainName: 
    Type: String
  WebsiteSubdomain: 
    Type: String
    Default: www
  ApiSubdomain: 
    Type: String
    Default: api

Mappings: 
  Build: 
    Version: 
      Number: v1.2.2

Resources:

  S3BucketWeb:
    Type: AWS::S3::Bucket

  CloudFrontAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref 'AWS::StackName'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3BucketWeb
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3BucketWeb
              - "/*"
          Principal:
            AWS:
              - Fn::Join:
                - ''
                - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity '
                  - Ref: CloudFrontAccessIdentity

  LambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: 'lambda-edge-role'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WebsiteCertifcate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName

  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Account
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ApplicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Application
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Device
      AttributeDefinitions:
      - AttributeName: ApplicationId
        AttributeType: S
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: ApplicationId
        KeyType: HASH
      - AttributeName: Id
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  WebApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: 'web-api-lambda-role'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  WebApiLambdaRoleInlinePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "web-api-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Resource: ["*"]
            Action: ["secretsmanager:*", "dynamodb:*"]
      Roles: 
        - Ref: "WebApiLambdaRole"

  WebApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SharkSync.Web.Api::SharkSync.Web.Api.LambdaEntryPoint::FunctionHandlerAsync
      Code:
        S3Bucket: io.sharksync.builds
        S3Key: 
          Fn::Join:
          - ''
          - - !FindInMap [Build, Version, Number]
            - '/SharkSync.Web.Api.zip'
      Role:
        Fn::GetAtt:
          - WebApiLambdaRole
          - Arn
      Runtime: dotnetcore2.0
      MemorySize: 256
      Timeout: 300

  WebApiGatewayApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SharkSync.WebApi

  WebApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WebApiGatewayApi.RootResourceId
      RestApiId: !Ref WebApiGatewayApi
      PathPart: '{proxy+}'

  WebApiGatewayProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref WebApiGatewayResource
      RestApiId: !Ref WebApiGatewayApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        Uri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations
        - Arn:
            Fn::GetAtt:
            - WebApiLambda
            - Arn
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200

  WebApiGatewayDeployment:
    DependsOn:
      - WebApiGatewayProxyMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref WebApiGatewayApi
      StageName: Prod

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 
        - WebApiLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: WebApiGatewayApi
          - "/*/*/*"

  DeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      RoleName: 'deployment-lambda-role'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DeploymentLambdaRoleInlinePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "deployment-policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Resource: ["arn:aws:s3:::io.sharksync.builds/*", "arn:aws:s3:::io.sharksync.web/*"]
            Action: ["s3:PutObject", "s3:GetObject"]
      Roles: 
        - Ref: "DeploymentLambdaRole"

  UnpackZipIntoS3BucketFunctionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: SharkSync.Deployment::SharkSync.Deployment.UnpackZipIntoS3BucketFunction::FunctionHandlerAsync
      Code:
        S3Bucket: io.sharksync.builds
        S3Key: 
          Fn::Join:
          - ''
          - - !FindInMap [Build, Version, Number]
            - '/SharkSync.Deployment.zip'
      Role:
        Fn::GetAtt:
          - DeploymentLambdaRole
          - Arn
      Runtime: dotnetcore2.0
      MemorySize: 128
      Timeout: 300

  UnpackZipIntoS3BucketFunction:
    Type: Custom::UnpackZipIntoS3BucketFunction
    DependsOn: UnpackZipIntoS3BucketFunctionLambda
    Properties:
      ServiceToken: !GetAtt UnpackZipIntoS3BucketFunctionLambda.Arn
      zipS3Bucket: io.sharksync.builds
      zipS3Key: 
        Fn::Join:
        - ''
        - - !FindInMap [Build, Version, Number]
          - '/SharkSync.Web.Html.zip'
      outputS3Bucket: io.sharksync.web
      outputPrefix: ''